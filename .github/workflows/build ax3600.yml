#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
#=================================================

name: Build Ax3600 Images

env:
  PREFIX_URL: https://downloads.immortalwrt.org/releases/23.05-SNAPSHOT/targets
  DEVICE_VERSION: 23.05-SNAPSHOT

on:
  workflow_dispatch:
    inputs:
      INPUT_TARGET:
        description: "Target to build (platform/target/subtarget)"
        required: false
        default: "all"
  #schedule:
  #  - cron: 0 0 * * *

jobs:
  Config:
    name: Generate Config
    runs-on: ubuntu-latest
    outputs:
      TARGETS: ${{ steps.find-targets.outputs.TARGETS }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Find Targets
        id: find-targets
        env:
          INPUT_TARGET: ${{ github.event.inputs.INPUT_TARGET }}
        run: |
          if [ "$INPUT_TARGET" = "all" ] || [ "$INPUT_TARGET" = "ax3600" ] || [ "$INPUT_TARGET" = "" ]; then
            export TARGETS="$(cat config/platform_ax3600.config)"
          else
            export TARGETS="$INPUT_TARGET"
          fi
          JSON='{"config": ["default"], "targets":['
          FIRST=1
          for TARGET in $TARGETS; do
          [[ $FIRST -ne 1 ]] && JSON="$JSON"','
          JSON="$JSON"'"'"${TARGET}"'"'
          FIRST=0
          done
          JSON="$JSON"']}'
          echo $JSON
          echo "TARGETS=$JSON" >> $GITHUB_OUTPUT

  Docker-Images:
    name: ${{ matrix.TARGETS }}
    needs: [Config]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.Config.outputs.TARGETS)}}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install build-essential libncurses5-dev libncursesw5-dev \
            zlib1g-dev gawk git gettext libssl-dev xsltproc rsync wget unzip python3 qemu-utils genisoimage


      - name: Generate Variables
        id: env
        run: |
          export DEVICE_PLATFORM=$(echo ${{ matrix.TARGETS }} | awk -F '/' '{print $1}')
          echo "DEVICE_PLATFORM=$DEVICE_PLATFORM"
          echo "DEVICE_PLATFORM=$DEVICE_PLATFORM" >> $GITHUB_ENV
          
          export DEVICE_TARGET=$(echo ${{ matrix.TARGETS }} | awk -F '/' '{print $2}')
          echo "DEVICE_TARGET=$DEVICE_TARGET"          
          echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
          
          export DEVICE_SUBTARGET=$(echo ${{ matrix.TARGETS }} | awk -F '/' '{print $3}')
          echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET"
          echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV
          
          export DOCKER_IMAGE_ARCH=$(echo ${{ matrix.TARGETS }} | awk -F '/' '{print $4}' | sed 's/-/\//g')
          echo "DOCKER_IMAGE_ARCH=$DOCKER_IMAGE_ARCH"
          echo "DOCKER_IMAGE_ARCH=$DOCKER_IMAGE_ARCH" >> $GITHUB_ENV
          
          export DOCKER_EXTERA_TAG=$(echo ${{ matrix.TARGETS }} | awk -F '/' '{print $5}')
          echo "DOCKER_EXTERA_TAG=$DOCKER_EXTERA_TAG"
          echo "DOCKER_EXTERA_TAG=$DOCKER_EXTERA_TAG" >> $GITHUB_ENV


      - name: Download Image Builder
        run: |
          echo url:$PREFIX_URL/$DEVICE_TARGET/$DEVICE_SUBTARGET/immortalwrt-imagebuilder-$DEVICE_VERSION-$DEVICE_TARGET-$DEVICE_SUBTARGET.Linux-x86_64.tar.xz
          wget -q $PREFIX_URL/$DEVICE_TARGET/$DEVICE_SUBTARGET/immortalwrt-imagebuilder-$DEVICE_VERSION-$DEVICE_TARGET-$DEVICE_SUBTARGET.Linux-x86_64.tar.xz

      - name: Set Image Builder
        run: |
          tar -xJf *.tar.xz
          cd immortalwrt-imagebuilder-$DEVICE_VERSION-$DEVICE_TARGET-$DEVICE_SUBTARGET.Linux-x86_64
          cp -rf $GITHUB_WORKSPACE/files .
          chmod +x files/etc/rc.local

      - name: Make Info
        run: |
          cd immortalwrt-imagebuilder-$DEVICE_VERSION-$DEVICE_TARGET-$DEVICE_SUBTARGET.Linux-x86_64
          chmod +x $GITHUB_WORKSPACE/scripts/*
          $GITHUB_WORKSPACE/scripts/preset-terminal-tools.sh
          make info
      
      - name: Build RootFS
        run: |
          cd immortalwrt-imagebuilder-$DEVICE_VERSION-$DEVICE_TARGET-$DEVICE_SUBTARGET.Linux-x86_64
          chmod +x $GITHUB_WORKSPACE/scripts/*
          #$GITHUB_WORKSPACE/scripts/preset-terminal-tools.sh
          export CONFIG_PACKAGES=$(cat $GITHUB_WORKSPACE/config/packages_ax3600.config | tr -s "\n" " ")
          #make image PACKAGES="$CONFIG_PACKAGES" FILES="files" 只编译不生成docker
          make image PROFILE="$DEVICE_PLATFORM" PACKAGES="$CONFIG_PACKAGES"
       
      - name: Copy target
        run: |  
          cd immortalwrt-imagebuilder-$DEVICE_VERSION-$DEVICE_TARGET-$DEVICE_SUBTARGET.Linux-x86_64
          ls -llah bin/targets/$DEVICE_TARGET/$DEVICE_SUBTARGET
          echo "---------"
          #cp bin/targets/$DEVICE_TARGET/$DEVICE_SUBTARGET/*rootfs.tar.gz $GITHUB_WORKSPACE
          cp bin/targets/$DEVICE_TARGET/$DEVICE_SUBTARGET/*.bin $GITHUB_WORKSPACE/immortalwrt_23.05-SNAPSHOT_ax3600.bin
          cp bin/targets/$DEVICE_TARGET/$DEVICE_SUBTARGET/*.ubi $GITHUB_WORKSPACE/immortalwrt_23.05-SNAPSHOT_ax3600.ubi
                  
      - name: Delete Image Builder
        run: |
          ls -llah bin/targets/$DEVICE_TARGET/$DEVICE_SUBTARGET
          cd $GITHUB_WORKSPACE
          rm -rf immortalwrt-imagebuilder*
          ls -llah


      
      - name: Upload Image ubi
        uses: actions/upload-artifact@v4
        with:
          name: immortalwrt_23.05-SNAPSHOT_ax3600.ubi
          path: immortalwrt_23.05-SNAPSHOT_ax3600.ubi
      
      - name: Upload Image bin
        uses: actions/upload-artifact@v4
        with:
          name: immortalwrt_23.05-SNAPSHOT_ax3600.bin
          path: immortalwrt_23.05-SNAPSHOT_ax3600.bin
